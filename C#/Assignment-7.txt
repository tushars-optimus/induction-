Ans- 
currInterestRate is static member, its memory is shared by all object of the class so changes in currInterestRate is reflected in all object  

Console .WriteLine( "Interest Rate is: {0}" , s1.GetInterestRateObj());---It is calling currInterestRate whose value is 0.04
Console .WriteLine( "Interest Rate is: {0}" ,s1.GetInterestRateObj());---s2.SetInterestRateObj(0.08) is setting the value of currInterestRate 0.08 which is static member
Console .WriteLine( "Interest Rate is: {0}" , SavingsAccount.GetInterestRate );-- It is calling currInterestRate whose value has been changed to 0.08 by
s2.SetInterestRateObj(0.08);
0.04,0.08,0.08 (c)
 

Static class

A class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword. 
Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.
A static class is basically the same as a non-static class, but there is one difference, a static class cannot be instantiated. We can access the members of a 
static class by using the class name itself.
 For example, if you have a static class that is named UtilityClass that has a public method 
 named MethodA, you call the method as shown in the following example:
  UtilityClass.MethodA();  


Static Members
A static method, field, property, or event is callable on a class even when no instance of the class has been created. If any instances of the class are created,
they cannot be used to access the static member.Only one copy of static fields and events exists, and static methods and properties can only access static fields 
and static events.
Static class members are declared using the static keyword before the return type of the member, for example:
public class Automobile
{
    public static int NumberOfWheels = 4;
    public static int SizeOfGasTank
    {
        get
        {
            return 15;
        }
    }
    public static void Drive() { }
    public static event EventType RunOutOfGas;

    //other non-static fields and properties...
}
class Vehicles
{
public static void main()
	{ 
		Automobile.Drive();
		int i = Automobile.NumberOfWheels;
	}
}